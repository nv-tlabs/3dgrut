[tool.poetry]
name = "threedgrut"
version = "0.1.0"
description = "3D Gaussian Rendering and Tracing"
authors = ["Your Name <you@example.com>"]
readme = "README.md"
packages = [
    { include = "threedgrut" },
    { include = "threedgrt_tracer" },
    { include = "threedgut_tracer" },
    { include = "threedgrut_playground" }
]

[tool.poetry.dependencies]
python = "^3.11"
torchmetrics = "*"
tensorboard = "*"
slangtorch = "1.3.4"
plyfile = "*"
polyscope = ">=2.3.0"
libigl = "*"
pygltflib = "*"
scikit-learn = "*"
wandb = "*"
fire = "*"
omegaconf = "*"
hydra-core = "*"
kornia = "*"
opencv-python = "*"
einops = "*"
imageio = "*"
msgpack = "*"
dataclasses-json = "*"
addict = "*"
rich = "*"
tqdm = "*"
setuptools = "<72.1.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"

[tool.poetry.scripts]
test = "pytest:main"
tests = "pytest:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=threedgrut",
    "--cov=threedgrt_tracer",
    "--cov=threedgut_tracer",
    "--cov=threedgrut_playground",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "-vv"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: marks tests as unit tests (deselect with '-m \"not unit\"')",
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

[tool.coverage.run]
source = ["threedgrut", "threedgrt_tracer", "threedgut_tracer", "threedgrut_playground"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/setup*.py",
    "*/conftest.py"
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"